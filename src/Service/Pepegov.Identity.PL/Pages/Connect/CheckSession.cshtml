@page
@using Pepegov.Identity.BL.OpenIddictHandlers
@using Serilog
@attribute [IgnoreAntiforgeryToken] 
@{
    Layout = null;
}

<!DOCTYPE html>
<title>OIDC Check Session</title>
<script>
    const sessionCookieName = '@SessionIdExtensions.CookieName';

    async function base64UrlEncode(arrayBuffer) {
        let binary = "";
        const bytes = new Uint8Array(arrayBuffer);
        for (let i = 0; i < bytes.length; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return btoa(binary)
            .replace(/\+/g, "-")   // replace + на -
            .replace(/\//g, "_")   // replace / на _
            .replace(/=+$/, "");   // remove = in the end
    }

    async function generateHash(clientId, origin, sessionId, salt) {
        const input = clientId + origin + sessionId + salt;
        const encoder = new TextEncoder();
        const utf8Bytes = encoder.encode(input);

        const hashBuffer = await crypto.subtle.digest("SHA-256", utf8Bytes);
        const hashBase64Url = await base64UrlEncode(hashBuffer);
        return hashBase64Url;
    }

    async function checkSession(origin, message) {
        try {
            //origin and message can not be empty
            if (!origin || !message) {
                return 'error';
            }

            //Take clientId and session state from message
            const [clientId, sessionState] = message.split(' ');
            if (!clientId || !sessionState) {
                return 'error';
            }

            //Take hash and salt from sessionState
            const [clientHash, salt] = sessionState.split('.');
            if (!clientHash || !salt) {
                return 'error';
            }

            //Get current sessionId from cookie
            const sessionId = document.cookie.split('; ').find(c => c.startsWith(sessionCookieName + '='))?.split('=')?.[1];
            if (!sessionId) { //If sessionId is deleted, the user will log out
                return 'changed';
            }

            //Check hash
            const hashBase64Url = await generateHash(clientId, origin, sessionId, salt)
            
            return clientHash === hashBase64Url ? 'unchanged' : 'changed';
        } catch (e) {
            console.error('OIDC Check Session error', e)
            return 'error';
        }
    }

    window.addEventListener('message', async function (e) {
        if (e.source === self) {
            return;
        }

        const result = await checkSession(e.origin, e.data);
        e.source.postMessage(result, e.origin);
    }, false);
</script>
